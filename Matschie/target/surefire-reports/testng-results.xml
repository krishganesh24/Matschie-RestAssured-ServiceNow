<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="4" total="14" passed="10">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="48232" started-at="2022-09-04T12:32:36Z" finished-at="2022-09-04T12:33:24Z">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@51cd7ffc]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test name="Surefire test" duration-ms="48232" started-at="2022-09-04T12:32:36Z" finished-at="2022-09-04T12:33:24Z">
      <class name="chain.GetIncidentTest">
        <test-method status="PASS" signature="sendGetRequest()[pri:0, instance:chain.GetIncidentTest@2fea7088]" name="sendGetRequest" duration-ms="6787" started-at="2022-09-04T12:33:17Z" finished-at="2022-09-04T12:33:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendGetRequest -->
        <test-method status="PASS" signature="after()[pri:0, instance:chain.GetIncidentTest@2fea7088]" name="after" is-config="true" duration-ms="2" started-at="2022-09-04T12:33:24Z" finished-at="2022-09-04T12:33:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- chain.GetIncidentTest -->
      <class name="chain.UpdateIncidentTest">
        <test-method status="PASS" signature="sendUpdateRequest()[pri:0, instance:chain.UpdateIncidentTest@40499e4f]" name="sendUpdateRequest" duration-ms="3895" started-at="2022-09-04T12:32:47Z" depends-on-methods="chain.CreateIncidentTest.sendPostRequest" finished-at="2022-09-04T12:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendUpdateRequest -->
        <test-method status="PASS" signature="after()[pri:0, instance:chain.UpdateIncidentTest@40499e4f]" name="after" is-config="true" duration-ms="1" started-at="2022-09-04T12:32:51Z" finished-at="2022-09-04T12:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- chain.UpdateIncidentTest -->
      <class name="runner.RunTest">
        <test-method status="PASS" signature="setUpClass()[pri:0, instance:runner.RunTest@51cd7ffc]" name="setUpClass" is-config="true" duration-ms="211" started-at="2022-09-04T12:32:51Z" finished-at="2022-09-04T12:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@51cd7ffc]" name="runScenario" duration-ms="3943" started-at="2022-09-04T12:32:51Z" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-09-04T12:32:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA["TC001 Create a Incident without any body in the HTTP request"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Incident Management in the Service now application"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@51cd7ffc]" name="runScenario" duration-ms="3901" started-at="2022-09-04T12:32:55Z" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-09-04T12:32:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA["TC002 Create a Incident with body as file in the HTTP request"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Incident Management in the Service now application"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@51cd7ffc]" name="runScenario" duration-ms="4040" started-at="2022-09-04T12:32:59Z" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-09-04T12:33:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA["TC002 Create a Incident with body as file in the HTTP request"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Incident Management in the Service now application"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@51cd7ffc]" name="runScenario" duration-ms="4633" started-at="2022-09-04T12:33:03Z" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-09-04T12:33:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA["TC003 Get a Incident with default response type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Incident Management in the Service now application"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunTest@51cd7ffc]" name="runScenario" duration-ms="5840" started-at="2022-09-04T12:33:07Z" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-09-04T12:33:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA["TC004 Get a Incident with filter category"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Incident Management in the Service now application"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="tearDownClass()[pri:0, instance:runner.RunTest@51cd7ffc]" name="tearDownClass" is-config="true" duration-ms="1" started-at="2022-09-04T12:33:13Z" finished-at="2022-09-04T12:33:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- runner.RunTest -->
      <class name="chain.DeleteIncidentTest">
        <test-method status="PASS" signature="sendDeleteRequest()[pri:0, instance:chain.DeleteIncidentTest@5c87bfe2]" name="sendDeleteRequest" duration-ms="4205" started-at="2022-09-04T12:33:13Z" depends-on-methods="chain.UpdateIncidentTest.sendUpdateRequest" finished-at="2022-09-04T12:33:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendDeleteRequest -->
        <test-method status="PASS" signature="after()[pri:0, instance:chain.DeleteIncidentTest@5c87bfe2]" name="after" is-config="true" duration-ms="2" started-at="2022-09-04T12:33:17Z" finished-at="2022-09-04T12:33:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- chain.DeleteIncidentTest -->
      <class name="chain.CreateIncidentTest">
        <test-method status="PASS" signature="before()[pri:0, instance:chain.CreateIncidentTest@f73dcd6]" name="before" is-config="true" duration-ms="792" started-at="2022-09-04T12:32:35Z" finished-at="2022-09-04T12:32:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="sendPostRequest(java.lang.String, java.lang.String)[pri:0, instance:chain.CreateIncidentTest@f73dcd6]" name="sendPostRequest" duration-ms="5940" started-at="2022-09-04T12:32:36Z" data-provider="fetchData" finished-at="2022-09-04T12:32:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CreateIncident.json]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[JSON]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendPostRequest -->
        <test-method status="PASS" signature="after()[pri:0, instance:chain.CreateIncidentTest@f73dcd6]" name="after" is-config="true" duration-ms="60" started-at="2022-09-04T12:32:42Z" finished-at="2022-09-04T12:32:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="sendPostRequest(java.lang.String, java.lang.String)[pri:0, instance:chain.CreateIncidentTest@f73dcd6]" name="sendPostRequest" duration-ms="4622" started-at="2022-09-04T12:32:42Z" data-provider="fetchData" finished-at="2022-09-04T12:32:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CreateIncident.xml]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[XML]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendPostRequest -->
        <test-method status="PASS" signature="after()[pri:0, instance:chain.CreateIncidentTest@f73dcd6]" name="after" is-config="true" duration-ms="2" started-at="2022-09-04T12:32:47Z" finished-at="2022-09-04T12:32:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- chain.CreateIncidentTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
